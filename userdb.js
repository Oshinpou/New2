// userdb.js - Ultra-Condensed User Account Management System (Functional but Extremely Compact)

import { Gun } from 'https://cdn.jsdelivr.net/npm/gun@0.2020.1231/gun.js';
import 'https://cdn.jsdelivr.net/npm/gun@0.2020.1231/sea.js';
import 'https://cdn.jsdelivr.net/npm/gun@0.2020.1231/lib/radix.js';
import 'https://cdn.jsdelivr.net/npm/gun@0.2020.1231/lib/axe.js';

const RELAY_PEERS = ['https://gun-manhattan.herokuapp.com/gun', 'https://gundb-webrtc.herokuapp.com/gun', 'https://gun-us.herokuapp.com/gun', 'https://peer.walled.city/gun'];
let gunInstance = null, userInstance = null, usersRootNode = null, emailIndexNode = null, phoneIndexNode = null;
export let isUserLoggedIn = false, currentUserData = null;

// UI & Validation Utilities (Ultra-Condensed)
const gId=i=>document.getElementById(i);
const msg=(i,m,e=false)=>{const el=gId(i);if(el){el.textContent=m;el.style.color=e?'var(--danger-color)':'var(--text-color)';}};
const sucMsg=(i,m)=>{msg(i,m);const el=gId(i);if(el){el.style.color='#28a745';el.style.fontWeight='bold';}};
const errMsg=(i,m)=>{msg(i,m,true);const el=gId(i);if(el){el.style.color='var(--danger-color)';el.style.fontWeight='bold';}};
const showNotif=(m,t='info',d=3000)=>{const n=gId('app-notification-area');if(!n)return;n.textContent=m;n.className=`notification ${t}`;n.style.display='block';if(d>0)setTimeout(()=>{n.style.display='none';n.textContent='';n.className='';},d);};
const hideNotif=()=>{const n=gId('app-notification-area');if(n){n.style.display='none';n.textContent='';n.className='';}};
const isValidEmail=e=>/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(e||'');
const isStrongPass=p=>(p||'').length>=8&&/[A-Z]/.test(p)&&/[a-z]/.test(p)&&/[0-9]/.test(p)&&/[!@#$%^&*(),.?":{}|<>]/.test(p);
const isValidPhone=p=>(p||'').length>=7&&/^[0-9\s\-()+]*$/.test(p);
const getFormData=f=>Object.fromEntries(new FormData(f).entries());
const toggleVis=(i,v)=>{const el=gId(i);if(el)el.style.display=v?'block':'none';};
const updateTitle=t=>{if(t)document.title=t;};
const genKey=p=>`${p}-${new Date().toISOString().split('T')[0]}-${Gun.uuid()}`;
const handleDBErr=(e,c='DB Op')=>{console.error(`DB Error in ${c}:`,e);errMsg('app-status',`DB error: ${e.message}`);};
const handleAppErr=(e,c='App')=>{console.error(`App Error in ${c}:`,e);errMsg('app-status',`App error: ${e.message}`);showNotif(`Error: ${e.message}`,'error',5000);};

// Core Database Operations (Ultra-Condensed)
async function initGun(){return new Promise((res,rej)=>{if(gunInstance){res();return;}gunInstance=Gun({peers:RELAY_PEERS,radix:true,axe:true});userInstance=gunInstance.user().recall({sessionStorage:true});usersRootNode=gunInstance.get('users');emailIndexNode=gunInstance.get('email_index');phoneIndexNode=gunInstance.get('phone_index');gunInstance.on('out',m=>{if(m.err){rej(new Error(`Gun.js conn failed: ${m.err}`));}else if(m.ok){res();}});setTimeout(()=>{if(!gunInstance._.opt.peers.length)rej(new Error('Gun.js conn timed out.'));},7000);msg('app-status','Initializing DB...');});}
const getGun=()=>gunInstance; const getUser=()=>userInstance; const getUsersNode=()=>usersRootNode;
const getPub=()=>isUserLoggedIn&&currentUserData&&currentUserData.pub?currentUserData.pub:null;
const getAlias=()=>isUserLoggedIn&&currentUserData&&currentUserData.alias?currentUserData.alias:null;

async function register(d){return new Promise(async(res,rej)=>{if(!d.username||d.username.length<3||!isValidEmail(d.email)||!isStrongPass(d.password)||!isValidPhone(d.phone)||d.country_code.length<1){rej(new Error('Invalid reg data.'));return;}msg('reg-message','Attempting reg...',false);const u=getUser(),uN=getUsersNode(),eI=emailIndexNode,pI=phoneIndexNode;if(!u||!uN||!eI||!pI){rej(new Error('DB not init.'));return;}const cPN=`${d.country_code}${d.phone}`;try{if(await new Promise(r=>eI.get(d.email).once(d=>r(!!d))))rej(new Error('Email in use.'));if(await new Promise(r=>pI.get(cPN).once(d=>r(!!d))))rej(new Error('Phone in use.'));u.create(d.username,d.password,async a=>{if(a.err)rej(new Error(`Reg failed: ${a.err}. Username might exist.`));else{u.auth(d.username,d.password,async aA=>{if(aA.err){rej(new Error(`Reg successful, but auto-login failed: ${aA.err}`));return;}const p=aA.sea.pub,cT=Gun.time.is();await uN.get(p).put({username:d.username,email:d.email,phone:d.phone,countryCode:d.country_code,createdAt:cT,lastLogin:cT,isRegistered:true,[`created_on_${new Date(cT).toISOString().split('T')[0]}`]:true});await eI.get(d.email).put(p);await pI.get(cPN).put(p);isUserLoggedIn=true;currentUserData={pub:p,alias:d.username,email:d.email,phone:d.phone,countryCode:d.country_code,createdAt:cT,lastLogin:cT};res('Reg successful & logged in.');});}});}}catch(e){rej(new Error(`Unexpected error: ${e.message}`));}});};
async function login(d){return new Promise(async(res,rej)=>{if(!d.username||d.username.length<3||!d.password||d.password.length<8){rej(new Error('Invalid login data.'));return;}msg('login-message','Attempting login...',false);const u=getUser(),uN=getUsersNode();if(!u||!uN){rej(new Error('DB not init.'));return;}try{u.auth(d.username,d.password,async a=>{if(a.err){rej(new Error(`Login failed: ${a.err}. Check username/password.`));}else{isUserLoggedIn=true;currentUserData={pub:a.sea.pub,alias:d.username};uN.get(currentUserData.pub).once(data=>{if(data){const{_,...cD}=data;currentUserData={...currentUserData,...cD};}uN.get(currentUserData.pub).put({lastLogin:Gun.time.is()});res('Login successful.');});}});}}catch(e){rej(new Error(`Unexpected error: ${e.message}`));}});};
async function logout(){return new Promise((res,rej)=>{const u=getUser();if(!u){rej(new Error('User not init.'));return;}try{u.leave();isUserLoggedIn=false;currentUserData=null;res('Logged out.');}catch(e){rej(new Error(`Failed to log out: ${e.message}`));}});};
async function checkLogin(){return new Promise(res=>{const u=getUser();if(!u){isUserLoggedIn=false;currentUserData=null;res(false);return;}u.on(async a=>{if(a.pub){isUserLoggedIn=true;currentUserData={pub:a.pub,alias:a.alias};const uN=getUsersNode();if(uN){uN.get(currentUserData.pub).once(data=>{if(data){const{_,...cD}=data;currentUserData={...currentUserData,...cD};}res(true);});}else{res(true);}}else{isUserLoggedIn=false;currentUserData=null;res(false);}});});};
async function saveProfile(p,d){return new Promise(async(res,rej)=>{if(!p||!d){rej(new Error('Invalid params.'));return;}const uN=getUsersNode();if(!uN){rej(new Error('DB not init.'));return;}try{uN.get(p).put(d,a=>{if(a.err){rej(new Error(`Failed to save: ${a.err}`));}else{res('Profile saved.');}});}}catch(e){rej(new Error(`Unexpected error: ${e.message}`));}});};
async function loadProfile(p){return new Promise(async(res,rej)=>{if(!p){rej(new Error('Invalid public key.'));return;}const uN=getUsersNode();if(!uN){rej(new Error('DB not init.'));return;}try{uN.get(p).once(d=>{if(d){const{_,...pD}=d;res(Object.keys(pD).length>0?pD:null);}else{res(null);}});}}catch(e){rej(new Error(`Unexpected error: ${e.message}`));}});};
async function updateProfileField(p,f,v){return new Promise(async(res,rej)=>{if(!p||!f||v===undefined){rej(new Error('Invalid params.'));return;}const uN=getUsersNode();if(!uN){rej(new Error('DB not init.'));return;}try{uN.get(p).get(f).put(v,a=>{if(a.err){rej(new Error(`Failed to update: ${a.err}`));}else{res(`Field '${f}' updated.`);}});}}catch(e){rej(new Error(`Unexpected error: ${e.message}`));}});};
async function deleteProfile(p){return new Promise(async(res,rej)=>{if(!p){rej(new Error('Invalid public key.'));return;}const uN=getUsersNode();if(!uN){rej(new Error('DB not init.'));return;}const uE=currentUserData?currentUserData.email:null,uPC=currentUserData?`${currentUserData.countryCode}${currentUserData.phone}`:null;try{await uN.get(p).put(null);if(uE)await emailIndexNode.get(uE).put(null);if(uPC)await phoneIndexNode.get(uPC).put(null);res('Profile deleted.');}catch(e){rej(new Error(`Unexpected error: ${e.message}`));}});};
function listenProfile(p,cb){if(!p||!cb)return;const uN=getUsersNode();if(!uN)return;try{uN.get(p).on(d=>{const{_,...pD}=d||{};cb(Object.keys(pD).length>0?pD:null);});}catch(e){handleDBErr(e,'listenProfile');}}
function validateSchema(d){if(!d||typeof d!=='object')return false;const rF=['username','email','phone','countryCode','createdAt','lastLogin','isRegistered'];for(const f of rF)if(!(f in d)||d[f]===undefined)return false;return d.username.length>=3&&isValidEmail(d.email)&&isValidPhone(d.phone)&&d.countryCode.length>=1;}
async function ensureNode(p){return new Promise(async(res,rej)=>{if(!p){rej(new Error('Invalid public key.'));return;}const uN=getUsersNode();if(!uN){rej(new Error('DB not init.'));return;}uN.get(p).once(d=>{if(d){res(true);}else{uN.get(p).put({placeholder:true,createdAt:Gun.time.is()},a=>{if(a.err){rej(new Error(`Failed to create placeholder: ${a.err}`));}else{res(true);}});}});});};

// Feature-Specific Database Operations (Ultra-Condensed)
async function saveShipAddr(p,d){if(!p||!d||!d.recipientName||!d.location||!d.shipping_phone||!d.shipping_cc)throw new Error('Invalid address data.');const uN=getUsersNode();if(!uN)throw new Error('DB not init.');const aI=genKey('shipping-address');await uN.get(p).get('shippingAddresses').get(aI).put(d);return aI;}
async function loadShipAddrs(p){if(!p)throw new Error('Invalid public key.');const uN=getUsersNode();if(!uN)throw new Error('DB not init.');const a=[];await new Promise(r=>{uN.get(p).get('shippingAddresses').map().once((d,k)=>{if(d&&k){const{_,...cD}=d;if(Object.keys(cD).length>0)a.push({id:k,...cD});}r();});});return a;}
async function updateShipAddr(p,aI,d){if(!p||!aI||!d||Object.keys(d).length===0)throw new Error('Missing params.');const uN=getUsersNode();if(!uN)throw new Error('DB not init.');await uN.get(p).get('shippingAddresses').get(aI).put(d);return 'Address updated.';}
async function deleteShipAddr(p,aI){if(!p||!aI)throw new Error('Missing params.');const uN=getUsersNode();if(!uN)throw new Error('DB not init.');await uN.get(p).get('shippingAddresses').get(aI).put(null);return 'Address deleted.';}
function listenShipAddrs(p,cb){if(!p||!cb)return;const uN=getUsersNode();if(!uN)return;try{uN.get(p).get('shippingAddresses').map().on((d,k)=>{const{_,...cD}=d||{};cb(Object.keys(cD).length>0?cD:null,k);});}catch(e){handleDBErr(e,'listenShipAddrs');}}

async function createOrder(p,d){if(!p||!d||!d.items||d.items.length===0||!d.total)throw new Error('Invalid order data.');const uN=getUsersNode();if(!uN)throw new Error('DB not init.');const oI=genKey('order');await uN.get(p).get('orders').get(oI).put({...d,orderDate:Gun.time.is(),status:d.status||'Pending'});return oI;}
async function loadOrders(p){if(!p)throw new Error('Invalid public key.');const uN=getUsersNode();if(!uN)throw new Error('DB not init.');const o=[];await new Promise(r=>{uN.get(p).get('orders').map().once((d,k)=>{if(d&&k){const{_,...cD}=d;if(Object.keys(cD).length>0)o.push({id:k,...cD});}r();});});return o;}
async function updateOrderStatus(p,oI,nS){if(!p||!oI||!nS)throw new Error('Missing params.');const uN=getUsersNode();if(!uN)throw new Error('DB not init.');await uN.get(p).get('orders').get(oI).get('status').put(nS);return 'Order status updated.';}
async function cancelOrder(p,oI){return updateOrderStatus(p,oI,'Cancelled');}
async function delayOrderDelivery(p,oI,nDD){if(!p||!oI||!nDD)throw new Error('Missing params.');const uN=getUsersNode();if(!uN)throw new Error('DB not init.');await uN.get(p).get('orders').get(oI).get('deliveryDate').put(nDD);return 'Order delivery delayed.';}
async function deleteOrderHist(p,oI){if(!p||!oI)throw new Error('Missing params.');const uN=getUsersNode();if(!uN)throw new Error('DB not init.');await uN.get(p).get('orders').get(oI).put(null);return 'Order deleted.';}
function listenOrders(p,cb){if(!p||!cb)return;const uN=getUsersNode();if(!uN)return;try{uN.get(p).get('orders').map().on((d,k)=>{const{_,...cD}=d||{};cb(Object.keys(cD).length>0?cD:null,k);});}catch(e){handleDBErr(e,'listenOrders');}}

async function addSavedProd(p,d){if(!p||!d||!d.name||!d.price)throw new Error('Missing product data.');const uN=getUsersNode();if(!uN)throw new Error('DB not init.');const pI=genKey('saved-product');await uN.get(p).get('savedProducts').get(pI).put({...d,savedAt:Gun.time.is()});return pI;}
async function loadSavedProds(p){if(!p)throw new Error('Invalid public key.');const uN=getUsersNode();if(!uN)throw new Error('DB not init.');const pA=[];await new Promise(r=>{uN.get(p).get('savedProducts').map().once((d,k)=>{if(d&&k){const{_,...cD}=d;if(Object.keys(cD).length>0)pA.push({id:k,...cD});}r();});});return pA;}
async function removeSavedProd(p,pI){if(!p||!pI)throw new Error('Missing params.');const uN=getUsersNode();if(!uN)throw new Error('DB not init.');await uN.get(p).get('savedProducts').get(pI).put(null);return 'Product removed.';}
async function moveSavedProdToCart(p,pI){if(!p||!pI)throw new Error('Missing params.');await removeSavedProd(p,pI);return 'Product moved (simulated).';}
function listenSavedProds(p,cb){if(!p||!cb)return;const uN=getUsersNode();if(!uN)return;try{uN.get(p).get('savedProducts').map().on((d,k)=>{const{_,...cD}=d||{};cb(Object.keys(cD).length>0?cD:null,k);});}catch(e){handleDBErr(e,'listenSavedProds');}}

async function verifyRecCreds(d){const u=getUser();if(!u)throw new Error('DB not ready.');return new Promise((res,rej)=>{u.auth(d.username,d.password,a=>{if(a.err){rej(new Error(`Auth failed: ${a.err}`));return;}loadProfile(a.sea.pub).then(p=>{if(p&&p.email===d.email&&p.phone===d.phone&&p.countryCode===d.countryCode)res(p);else rej(new Error('Recovery details do not match.'));}).catch(rej);});});}
async function recUserByEmail(e,p,pw){if(!e||!p||!pw)throw new Error('All recovery details are required.');msg('rec-user-message','Attempting recovery...',false);try{const uP=await verifyRecCreds({email:e,phone:p,password:pw,username:'any',countryCode:'any'});return uP.username;}catch(e){throw new Error(`Recovery failed: ${e.message}`);}}
async function recEmailByPhone(p,pw,u){if(!p||!pw||!u)throw new Error('All recovery details are required.');msg('rec-email-message','Attempting recovery...',false);try{const uP=await verifyRecCreds({username:u,password:pw,phone:p,email:'any',countryCode:'any'});return uP.email;}catch(e){throw new Error(`Recovery failed: ${e.message}`);}}
async function reqPassReset(u,e,p){if(!u||!e||!p)throw new Error('All details are required.');msg('rec-pass-message','Initiating reset...',false);try{const g=getGun();if(!g)throw new Error('DB not ready');let fP=null;await new Promise(r=>g.get('email_index').get(e).once(pub=>{if(pub)fP=pub;r();}));if(!fP)await new Promise(r=>g.get('phone_index').get(`${e.countryCode}${p}`).once(pub=>{if(pub)fP=pub;r();}));if(fP){const uP=await loadProfile(fP);if(uP&&uP.username===u&&uP.email===e&&uP.phone===p)return 'Reset link sent (simulated).';else throw new Error('Account details do not match.');}else throw new Error('No account found.');}catch(e){throw new Error(`Reset failed: ${e.message}`);}}
async function recPhone(u,e,pw){if(!u||!e||!pw)throw new Error('All recovery details are required.');msg('rec-phone-message','Attempting recovery...',false);try{const uP=await verifyRecCreds({username:u,email:e,password:pw,phone:'any',countryCode:'any'});return `${uP.countryCode}${uP.phone}`;}catch(e){throw new Error(`Recovery failed: ${e.message}`);}}
async function recCC(u,e,pw){if(!u||!e||!pw)throw new Error('All recovery details are required.');msg('rec-cc-message','Attempting recovery...',false);try{const uP=await verifyRecCreds({username:u,email:e,password:pw,phone:'any',countryCode:'any'});return uP.countryCode;}catch(e){throw new Error(`Recovery failed: ${e.message}`);}}

async function verifyCurrentCredsForChange(d){const u=getUser();if(!u||!isUserLoggedIn)throw new Error('Not logged in or DB not ready.');const cP=getPub();if(!cP)throw new Error('Current pub key not found.');return new Promise((res,rej)=>{u.auth(d.current_username,d.current_password,a=>{if(a.err){rej(new Error(`Auth failed: ${a.err}`));return;}if(a.sea.pub!==cP){rej(new Error('Auth mismatch.'));return;}loadProfile(cP).then(p=>{if(p&&p.email===d.current_email&&p.phone===d.current_phone&&p.countryCode===d.current_cc)res(p);else rej(new Error('Provided current details do not match.'));}).catch(rej);});});}
async function changeUser(oD,nU){if(!oD||!nU)throw new Error('Missing params.');msg('change-username-message','Changing username...',false);try{const uP=await verifyCurrentCredsForChange(oD);await updateProfileField(uP.pub,'username',nU);return 'Username changed (simulated).';}catch(e){throw new Error(`Failed to change username: ${e.message}`);}}
async function changeEmail(oD,nE){if(!oD||!nE)throw new Error('Missing params.');msg('change-email-message','Changing email...',false);try{const uP=await verifyCurrentCredsForChange(oD);await updateProfileField(uP.pub,'email',nE);return 'Email changed.';}catch(e){throw new Error(`Failed to change email: ${e.message}`);}}
async function changePass(oD,nP){if(!oD||!nP)throw new Error('Missing params.');msg('change-password-message','Changing password...',false);try{await verifyCurrentCredsForChange(oD);return 'Password changed (simulated).';}catch(e){throw new Error(`Failed to change password: ${e.message}`);}}
async function changePhone(oD,nP){if(!oD||!nP)throw new Error('Missing params.');msg('change-phone-message','Changing phone...',false);try{const uP=await verifyCurrentCredsForChange(oD);await updateProfileField(uP.pub,'phone',nP);return 'Phone changed.';}catch(e){throw new Error(`Failed to change phone: ${e.message}`);}}
async function changeCC(oD,nCC){if(!oD||!nCC)throw new Error('Missing params.');msg('change-cc-message','Changing CC...',false);try{const uP=await verifyCurrentCredsForChange(oD);await updateProfileField(uP.pub,'countryCode',nCC);return 'CC changed.';}catch(e){throw new Error(`Failed to change CC: ${e.message}`);}}

async function confirmDel(p,cD){if(!p||!cD||!cD.confirmed)throw new Error('Deletion requires confirmation.');msg('delete-account-message','Processing deletion...',false);try{const uN=getUsersNode();if(!uN)throw new Error('DB not init.');const uP=await loadProfile(p);const uE=uP?uP.email:null,uPC=uP?`${uP.countryCode}${uP.phone}`:null;await uN.get(p).get('shippingAddresses').put(null);await uN.get(p).get('orders').put(null);await uN.get(p).get('savedProducts').put(null);await uN.get(p).put(null);if(uE)await getGun().get('email_index').get(uE).put(null);if(uPC)await getGun().get('phone_index').get(uPC).put(null);getUser().leave();return 'Account deleted.';}catch(e){throw new Error(`Deletion failed: ${e.message}`);}}
const validateDelCheckboxes=(c)=>{const rC=['confirm-data-deletion','confirm-irreversible','confirm-proceed'];for(const cI of rC)if(!c[cI])return false;return true;};

// UI Rendering & Event Handling (Ultra-Condensed)
const updateLoginStatus=(l,u=null)=>{const s=gId('login-status-placeholder');if(!s)return;s.textContent=l?`Logged in as: ${u||'Unknown User'}`:'Not Logged In';s.style.color=l?'#28a745':'#dc3545';l?showLoggedInSections():hideLoggedInSections();};
const showLoggedInSections=()=>{['account-data','change-credentials','delete-account'].forEach(id=>toggleVis(id,true));['login','registration'].forEach(id=>toggleVis(id,false));gId('account-data-note').style.display='none';};
const hideLoggedInSections=()=>{['account-data','change-credentials','delete-account'].forEach(id=>toggleVis(id,false));['login','registration'].forEach(id=>toggleVis(id,true));gId('account-data-note').style.display='block';};
const renderShipDetails=d=>{const o=gId('saved-shipping-output');if(!o)return;o.innerHTML=d?`<strong>${d.recipientName||'N/A'}</strong><br>${d.apartment||''}, ${d.location||'N/A'}<br>${d.area||''}, ${d.city||'N/A'}, ${d.state||'N/A'}, ${d.pincode||'N/A'}<br>${d.country||'N/A'}<br>Contact: ${d.shipping_cc||''} ${d.shipping_phone||'N/A'}`:'No shipping address saved yet.';};
const renderOrders=async a=>{const c=document.querySelector('.orders-container');if(!c)return;c.innerHTML='';if(a&&a.length>0){a.forEach(o=>addOrderItem(o));}else{c.innerHTML='<div class="message-output">No orders created yet.</div>';}};
const addOrderItem=d=>{const c=document.querySelector('.orders-container');if(!c||!d||!d.id)return;const h=`<div class="order-item"><strong>Order #${d.id||'N/A'}</strong><br>Date: ${d.orderDate?new Date(d.orderDate).toLocaleDateString():'N/A'} | Status: ${d.status||'N/A'}<br>Items: ${d.items?d.items.length:0} | Total: $${(d.total||0).toFixed(2)}<br><div class="input-group" style="margin-top: 10px;">${d.status==='Shipped'?`<button class="btn-secondary delay-delivery-btn" type="button">Delay Delivery</button>`:''}${d.status!=='Cancelled'?`<button class="btn-danger cancel-order-btn" type="button">Cancel Order</button>`:''}<button class="btn-secondary delete-history-btn" type="button">Delete from History</button></div><div class="message-output" id="order-item-${d.id}-message" style="margin-top: 10px;"></div></div>`;const t=document.createElement('div');t.innerHTML=h;const el=t.firstElementChild;el.id=`order-item-${d.id}`;c.appendChild(el);el.querySelector('.delay-delivery-btn')?.addEventListener('click',async()=>{const nD=prompt('New date (YYYY-MM-DD):');if(nD){try{await delayOrderDelivery(getPub(),d.id,nD);msg(`order-item-${d.id}-message`,'Delayed!',false);}catch(e){msg(`order-item-${d.id}-message`,e.message,true);}}});el.querySelector('.cancel-order-btn')?.addEventListener('click',async()=>{if(confirm('Cancel order?')){try{await cancelOrder(getPub(),d.id);msg(`order-item-${d.id}-message`,'Cancelled!',false);}catch(e){msg(`order-item-${d.id}-message`,e.message,true);}}});el.querySelector('.delete-history-btn')?.addEventListener('click',async()=>{if(confirm('Delete from history?')){try{await deleteOrderHist(getPub(),d.id);el.remove();msg('orders-container-message','Order removed.',false);}catch(e){msg('orders-container-message',e.message,true);}}});};
const renderSavedProds=async a=>{const c=document.querySelector('.saved-products-container');if(!c)return;c.innerHTML='';if(a&&a.length>0){a.forEach(p=>addSavedProdCard(p));renderEmptyStateMessage('saved-products-container-message','');}else{renderEmptyStateMessage('saved-products-container-message','No products saved for later.');}};
const addSavedProdCard=d=>{const c=document.querySelector('.saved-products-container');if(!c||!d||!d.id)return;const iU=d.imageUrl||`https://placehold.co/300x200/333/fff?text=${encodeURIComponent(d.name||'Product Image')}`;const h=`<div class="product-card"><img src="${iU}" alt="${d.name||'Product Image'}" onerror="this.onerror=null;this.src='https://placehold.co/300x200/333/fff?text=Image+Missing';" style="border-radius: 5px; border: 1px solid rgba(212, 175, 55, 0.3); margin-bottom: 15px;"><h4>${d.name||'Unknown Product'}</h4><p>Price: $${(d.price||0).toFixed(2)}</p><div class="input-group" style="margin-top: 10px;"><button class="btn-secondary move-to-cart-btn" type="button">Move to Cart</button><button class="btn-danger remove-saved-product-btn" type="button">Remove</button></div><div class="message-output" id="product-card-${d.id}-message" style="margin-top: 10px;"></div></div>`;const t=document.createElement('div');t.innerHTML=h;const el=t.firstElementChild;el.id=`product-card-${d.id}`;c.appendChild(el);el.querySelector('.move-to-cart-btn')?.addEventListener('click',async()=>{try{await moveSavedProdToCart(getPub(),d.id);msg(`product-card-${d.id}-message`,'Moved!',false);}catch(e){msg(`product-card-${d.id}-message`,e.message,true);}});el.querySelector('.remove-saved-product-btn')?.addEventListener('click',async()=>{if(confirm('Remove saved product?')){try{await removeSavedProd(getPub(),d.id);el.remove();msg('saved-products-container-message','Product removed.',false);}catch(e){msg('saved-products-container-message',e.message,true);}}});};
const renderEmptyStateMessage=(cI,m)=>{const c=gId(cI);if(!c)return;c.innerHTML=m?`<div class="message-output" style="margin-top: 20px;">${m}</div>`:'';};
const handleProfileUpdate=d=>updateLoginStatus(!!d,d?d.username:null);
const handleShipUpdate=async(d,id)=>{if(isUserLoggedIn&&getPub()){const a=await loadShipAddrs(getPub());renderShipDetails(a.length>0?a[0]:null);}else{renderShipDetails(null);}};
const handleOrdersUpdate=async(d,id)=>{if(isUserLoggedIn&&getPub()){const o=await loadOrders(getPub());renderOrders(o);}else{renderOrders([]);}};
const handleProdsUpdate=async(d,id)=>{if(isUserLoggedIn&&getPub()){const p=await loadSavedProds(getPub());renderSavedProds(p);}else{renderSavedProds([]);}};
const resetForm=(f)=>{f.reset();f.querySelectorAll('.form-error-message').forEach(el=>el.textContent='');f.querySelectorAll('.input-error-state,.input-valid-state').forEach(el=>el.classList.remove('input-error-state','input-valid-state'));};

function initFormListeners(){
  gId('reg-form')?.addEventListener('submit',async e=>{e.preventDefault();resetForm(e.target);try{await register(getFormData(e.target));sucMsg('reg-message','Reg successful! Logged in.');updateLoginStatus(true,getFormData(e.target).username);}catch(err){errMsg('reg-message',err.message);}});
  gId('login-form')?.addEventListener('submit',async e=>{e.preventDefault();resetForm(e.target);try{await login(getFormData(e.target));sucMsg('login-message','Login successful!');updateLoginStatus(true,getFormData(e.target).username);}catch(err){errMsg('login-message',err.message);}});
  gId('ship-address-form')?.addEventListener('submit',async e=>{e.preventDefault();try{const p=getPub();if(!p)throw new Error('Not logged in.');await saveShipAddr(p,getFormData(e.target));sucMsg('saved-shipping-output','Address saved!');const a=await loadShipAddrs(p);renderShipDetails(a.length>0?a[0]:null);}catch(err){errMsg('saved-shipping-output',`Failed to save: ${err.message}`);}});
  gId('delete-account-form')?.addEventListener('submit',async e=>{e.preventDefault();const c={'confirm-data-deletion':gId('confirm-data-deletion')?.checked,'confirm-irreversible':gId('confirm-irreversible')?.checked,'confirm-proceed':gId('confirm-proceed')?.checked};if(!validateDelCheckboxes(c)){errMsg('delete-account-message','Confirm all checkboxes.');return;}const d=getFormData(e.target);try{const p=getPub();if(!p)throw new Error('Not logged in.');await verifyCurrentCredsForChange({current_username:d.del_username,current_password:d.del_password,current_email:d.del_email,current_phone:d.del_phone,current_cc:d.del_cc});await confirmDel(p,{confirmed:true});sucMsg('delete-account-message','Account deleted.');updateLoginStatus(false);resetForm(e.target);}catch(err){errMsg('delete-account-message',`Deletion failed: ${err.message}`);}});
  // TODO: Add listeners for all other forms (recovery, change credentials)
}

// Global Application Setup & Entry Point (Ultra-Condensed)
function setupGlobalListeners(){
  gId('status-nav').querySelector('button.btn-danger')?.addEventListener('click',async()=>{try{await logout();updateLoginStatus(false);showNotif('Logged out.','info',3000);}catch(e){handleAppErr(e,'Global Logout');}});
  gId('status-nav').querySelector('button.btn-secondary')?.addEventListener('click',()=>window.history.back());
  window.addEventListener('online',()=>msg('app-status','Online. Syncing...',false));
  window.addEventListener('offline',()=>msg('app-status','Offline. Queued.',true));
}
document.addEventListener('DOMContentLoaded',async()=>{
  updateTitle('User Account System - Loading...');showNotif('Connecting to DB...','info',0);
  try{await initGun();hideNotif();sucMsg('app-status','DB connected. UI init...');const l=await checkLogin();updateLoginStatus(l,currentUserData?currentUserData.alias:null);setupGlobalListeners();initFormListeners();
    if(l&&currentUserData&&currentUserData.pub){const p=currentUserData.pub;const a=await loadShipAddrs(p);renderShipDetails(a.length>0?a[0]:null);const o=await loadOrders(p);renderOrders(o);const sP=await loadSavedProds(p);renderSavedProds(sP);
      listenProfile(p,handleProfileUpdate);listenShipAddrs(p,handleShipUpdate);listenOrders(p,handleOrdersUpdate);listenSavedProds(p,handleProdsUpdate);}else{hideLoggedInSections();}
    updateTitle('User Account System');showNotif('App ready!','success',2000);}catch(e){handleAppErr(e,'mainEntry');errMsg('app-status',`App failed: ${e.message}`);updateTitle('User Account System - Error');showNotif('App failed to load.','error',5000);}
});

// Remaining Conceptual/Stub Functions (Minimalist)
async function encryptSensitiveData(d,k){return new Promise(r=>r());}async function decryptSensitiveData(eD,k){return new Promise(r=>r());}async function getPublicUserAttributes(p){return new Promise(r=>r());}async function getPrivateUserAttributes(p){return new Promise(r=>r());}async function updateLastLoginTimestamp(p){return new Promise(r=>r());}async function setInitialUserPermissions(p){return new Promise(r=>r());}async function archiveOldUserData(p,tD){return new Promise(r=>r());}async function restoreArchivedUserData(p,aI){return new Promise(r=>r());}async function performDataSchemaMigration(oS,nS){return new Promise(r=>r());}async function initiateUserDataBackup(p){return new Promise(r=>r());}async function restoreUserDataFromBackup(p,bI){return new Promise(r=>r());}async function getConnectedRelayPeers(){return[];}async function checkSingleRelayHealth(rU){return true;}async function reconnectToFailedRelay(rU){return new Promise(r=>r());}async function monitorGlobalDataSyncStatus(){return{};}async function retrieveGunInternalStats(){return{};}async function clearLocalGunCache(){return new Promise(r=>r());}function setupGlobalDataListener(rk,cb){}function removeGlobalDataListener(rk){}function validateRecoveryInput(d){return true;}function validateChangeCredentialInput(d){return true;}async function logFeatureSpecificAction(p,aT,d){return new Promise(r=>r());}function subscribeToProductUpdates(pI,cb){}function unsubscribeFromProductUpdates(pI){}function handleDataConflictResolution(k,lD,rD){return lD;}async function initializeAllModules(){};async function runAllApplicationTests(){return new Promise(r=>r());}async function cleanupOldData(){return new Promise(r=>r());}async function monitorResourceUsage(){return{};}async function reportBug(bD){return new Promise(r=>r());}function updateAppVersion(v){}async function checkAppUpdates(){return false;}async function installServiceWorker(){return new Promise(r=>r());}async function unregisterServiceWorker(){return new Promise(r=>r());}async function copyTextToUserClipboard(t){return new Promise(r=>r());}async function generateSecureUUID(){return Gun.uuid();}async function showCustomAlertDialog(m,t,d){showNotif(m,t,d);}async function showCustomConfirmDialog(m){return confirm(m);}async function loadExternalJavaScript(u){return new Promise(r=>r());}async function loadExternalCssStylesheet(u){return new Promise(r=>r());}function parseURLQueryParams(){return{};}function updateBrowserURLParams(p){}function isBrowserOnline(){return navigator.onLine;}function addOfflineStatusListener(cb){window.addEventListener('offline',cb);}function addOnlineStatusListener(cb){window.addEventListener('online',cb);}function setupGlobalKeyboardShortcuts(){}function preventAllFormDefaultSubmissions(){document.querySelectorAll('form').forEach(f=>f.addEventListener('submit',e=>e.preventDefault()));}function sanitizeUserInput(i){return i;}function deepCloneJavaScriptObject(o){return JSON.parse(JSON.stringify(o));}function isObjectEmpty(o){return!o||Object.keys(o).length===0;}function convertArrayToMap(a,kF){return new Map();}function convertMapToArray(m){return Array.from(m.values());}async function retryAsyncOperation(aF,mR,dM){return aF();}function calculateExponentialBackoffDelay(aN,iD){return iD;}function handleBrowserCompatibilityIssues(){}function setupApplicationPerformanceMonitoring(){}function sendAnalyticsEvent(eN,eD){}function toggleApplicationDarkMode(){}function saveUserPreferenceLocally(k,v){}function loadUserPreferenceLocally(k){return null;}
